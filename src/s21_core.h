#include "s21_decimal.h"

#ifndef S21_DECIMAL_CORE_H
#define S21_DECIMAL_CORE_H

#include <math.h>

// checks if a bit is set
#define IS_SET(X, POS) ((X >> POS) & 1U)
// sets the bit to 1 at a give position
#define ADD_BIT(X, POS) (X |= (1U << POS))
// sets multiple bits at poisition by the givev bit value
#define SET_BIT(X, BIT, POS) (X |= (BIT << POS))
// bit becomes 0 P.S. ALL INT NUMBER BECOMES 0 !
#define INIT_ZERO(X) (X &= (0U << 32))
// real zero_bit
#define ZERO_BIT(X, POS) (X &= ~(1UL << POS));

typedef enum {
    D_START_EXP = 16,  // Beginning of the Exponent Bits
    D_END_EXP = 23,    // End of the Exponent Bits
    D_MAX_EXP_VAL = 28,
    D_SIGN = 31,  // Sign Bits
} s21_decimal_const;

typedef enum {
    ARITHMETIC_OK = 0,
    S21_INFINITY = 1,
    S21_NEGATIVE_INFINITY = 2,
    S21_NAN = 3
} arithmetic_result;

typedef struct {
    unsigned int bits[4];
} s21_decimal;

typedef enum {
    FALSE = 0,
    TRUE = 1,
} comparison_result;

typedef enum { CONVERTATION_OK = 0, CONVERTATION_ERROR = 1 } convertation_result;

void init_decimal(s21_decimal *decimal);
// returns 0 meaning positive 1 negative
bool get_sign(s21_decimal decimal);
void set_sign_neg(s21_decimal *decimal);
void set_sign_pos(s21_decimal *decimal);
int get_exponent(s21_decimal decimal);
void set_exponent(s21_decimal *decimal, int new_exponent);
// helpers
s21_decimal add(s21_decimal a, s21_decimal b);
s21_decimal add_integers(s21_decimal a, s21_decimal b);
s21_decimal add_floats(s21_decimal a, s21_decimal b);
s21_decimal add_floats(s21_decimal a, s21_decimal b);
s21_decimal sum_right(s21_decimal a, s21_decimal b);
s21_decimal sum_left(s21_decimal a, s21_decimal b);
int check_overflow(s21_decimal val, int exponent);

void set_bit_1(s21_decimal *n, int pos);
void set_bit_0(s21_decimal *n, int pos);

int get_bit(s21_decimal n, int pos);
void init_zero(s21_decimal *n);

void shift_r_one(s21_decimal *a);
void shift_r(s21_decimal *a, int n);
void shift_l_one(s21_decimal *a);
void shift_l(s21_decimal *a, int n);

s21_decimal bit_and(s21_decimal a, s21_decimal b);
s21_decimal bit_or(s21_decimal a, s21_decimal b);
s21_decimal bit_xor(s21_decimal a, s21_decimal b);
s21_decimal bit_not(s21_decimal a);
int eq_zero(s21_decimal value);
int max(int a, int b);
int min(int a, int b);

static const char *const binary_powers_of_ten[29] = {
    [0] =
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "1",
    [1] =
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101"
        "0",
    [2] =
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010"
        "0",
    [3] =
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110100"
        "0",
    [4] =
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000001001110001000"
        "0",
    [5] =
        "00000000000000000000000000000000000000000000000000000000000000000000000000000001100001101010000"
        "0",
    [6] =
        "00000000000000000000000000000000000000000000000000000000000000000000000000001111010000100100000"
        "0",
    [7] =
        "00000000000000000000000000000000000000000000000000000000000000000000000010011000100101101000000"
        "0",
    [8] =
        "00000000000000000000000000000000000000000000000000000000000000000000010111110101111000010000000"
        "0",
    [9] =
        "00000000000000000000000000000000000000000000000000000000000000000011101110011010110010100000000"
        "0",
    [10] =
        "00000000000000000000000000000000000000000000000000000000000000100101010000001011111001000000000"
        "0",
    [11] =
        "00000000000000000000000000000000000000000000000000000000000101110100100001110110111010000000000"
        "0",
    [12] =
        "00000000000000000000000000000000000000000000000000000000111010001101010010100101000100000000000"
        "0",
    [13] =
        "00000000000000000000000000000000000000000000000000001001000110000100111001110010101000000000000"
        "0",
    [14] =
        "00000000000000000000000000000000000000000000000001011010111100110001000001111010010000000000000"
        "0",
    [15] =
        "00000000000000000000000000000000000000000000001110001101011111101010010011000110100000000000000"
        "0",
    [16] =
        "00000000000000000000000000000000000000000010001110000110111100100110111111000001000000000000000"
        "0",
    [17] =
        "00000000000000000000000000000000000000010110001101000101011110000101110110001010000000000000000"
        "0",
    [18] =
        "00000000000000000000000000000000000011011110000010110110101100111010011101100100000000000000000"
        "0",
    [19] =
        "00000000000000000000000000000000100010101100011100100011000001001000100111101000000000000000000"
        "0",
    [20] =
        "00000000000000000000000000000101011010111100011101011110001011010110001100010000000000000000000"
        "0",
    [21] =
        "00000000000000000000000000110110001101011100100110101101110001011101111010100000000000000000000"
        "0",
    [22] =
        "00000000000000000000001000011110000110011110000011001001101110101011001001000000000000000000000"
        "0",
    [23] =
        "00000000000000000001010100101101000000101100011111100001010010101111011010000000000000000000000"
        "0",
    [24] =
        "00000000000000001101001111000010000110111100111011001100111011011010000100000000000000000000000"
        "0",
    [25] =
        "00000000000010000100010110010101000101100001010000000001010010000100101000000000000000000000000"
        "0",
    [26] =
        "00000000010100101011011111010010110111001100100000001100110100101110010000000000000000000000000"
        "0",
    [27] =
        "00000011001110110010111000111100100111111101000010000000001111001110100000000000000000000000000"
        "0",
    [28] =
        "00100000010011111100111001011110001111100010010100000010011000010001000000000000000000000000000"
        "0",
};

// void print_bits(s21_decimal d);
#endif  // S21_DECIMAL_CORE_H
